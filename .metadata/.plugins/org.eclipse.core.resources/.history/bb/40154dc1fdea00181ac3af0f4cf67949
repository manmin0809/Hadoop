package com.cy58.mm.KafkaDemo.spring.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;

/**
 * kafka 配置文件
 * 
 * @author ManMin
 * @date 2018年11月16日 上午12:10:19
 *
 */
@Configuration
public class AppConfig {

	@Bean
	public KafkaTemplate<String, String> kafkaTemplate() {
		return new KafkaTemplate<>(producerFactory());
	}

	@Bean
	public ProducerFactory<String, String> producerFactory() {
		return new DefaultKafkaProducerFactory<>(producerConfigs());
	}

	@Bean
	public Map<String, Object> producerConfigs() {
		HashMap<String, Object> props = new HashMap<>();
		props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,
				"bigdata-pro01.mym.com:9092, bigdata-pro02.mym.com:9092, bigdata-pro03.mym.com:9092");
		props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
		props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true); // 可以避免重复发送
		// props.put(ProducerConfig.RETRIES_CONFIG, 3);
		//  props.put(ProducerConfig.ACKS_CONFIG, "1");
		return props;
	}
}
